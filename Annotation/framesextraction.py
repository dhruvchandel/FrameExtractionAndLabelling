# -*- coding: utf-8 -*-
"""FramesExtraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bRwwzvDtcnw7vOi3wkAw3Q9ococbb97C
"""

import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
from imutils.video import VideoStream
import imutils
import time
import torch
from torch.autograd import Variable
from torch import optim
# import face_detection
import os
import json

###
working_directory = input("Enter Main Directory Location")
os.chdir(working_directory)
video_containing_folder = os.path.join(working_directory, "videoFolder")
###

"""### Working Directory"""

# working_directory= "C:\\xerotech\\"
target_directory = os.path.join(working_directory,"ExtractedImages")
print(target_directory)
os.makedirs(target_directory,exist_ok = True)

"""### Setting the directories"""

# video_files = [os.path.join("C:\\xerotech\\videos",x) for x in os.listdir("C:\\xerotech\\videos")]
# video_containing_folder = os.path.join(working_directory,"videos")
data_info = [x for x in os.listdir(video_containing_folder) if x[0]!= "."]

"""### Frame Extraction Function"""

def video_extraction(video_add,video_name,target_folder,fps_rate= 1,second_s = 3):
    Video = cv2.VideoCapture(video_add)
    print("Accessing Video : ", video_add)
    print("Video dimension : ({},{},3)".format(Video.get(3),Video.get(4)))
    frame_rate = int(Video.get(5))
    print("Frame Rate : {}".format(frame_rate))
    
    if frame_rate <=4:
        print("Frame Rate Of Video is less than 4")
        return
    frames = int(frame_rate/fps_rate)
    print("Extraction of frames at : {} ".format(frames))
    
    total = 1
    sec_frame_count = 1
    total_frame_count=0   
    second_skip = second_s
    while Video.isOpened():
        ret,frame = Video.read()
        if ret != True:
            break
        #frame = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
#         resized_frame = cv2.resize(frame,(256,256))
        height,width = frame.shape[:-1]
        sec_frame_count+=1
        if sec_frame_count>frame_rate:
            sec_frame_count = 1  
            total += 1
            
        if int(sec_frame_count%frames) == 0:
            if second_skip%3==0:
                total_frame_count +=1
                cv2.imwrite(target_folder+"\\"+video_name+"_{}_{}_{}.jpg".format(total_frame_count,total,sec_frame_count//frames),frame)      
                second_skip += 1
            else:
                second_skip += 1
    print("Video {}-->{} Processed ".format(video_name,target_folder),"\n")
    Video.release()
    cv2.destroyAllWindows()

"""### Setting PreProcessing Function"""

def preprocess_data(data_info_dict,target_dir,video_files_folder):
    index = 0
    for key in data_info[index:]:
        print("Working On Index : {}".format(index))
        index += 1
        video_name = key
        print(video_name)
        saving_dir = os.path.join(target_dir,video_name)
        # os.mkdir(saving_dir)
        video_dir = os.path.join(video_files_folder,video_name)
        video_extraction(video_dir,video_name,saving_dir)
        break

preprocess_data(data_info,target_directory,video_containing_folder)

